<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>应急响应-手工排查</title>
      <link href="/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/2019/07/28/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%E6%89%8B%E5%B7%A5%E6%8E%92%E6%9F%A5.html"/>
      <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/2019/07/28/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%E6%89%8B%E5%B7%A5%E6%8E%92%E6%9F%A5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一直在网上浏览各种应急响应的手段，在这里进行一个总和</p></blockquote><a id="more"></a><h1 id="常见的安全事件"><a href="#常见的安全事件" class="headerlink" title="常见的安全事件"></a>常见的安全事件</h1><ul><li>WEB入侵：挂马，页面篡改，WEBShell</li><li>系统入侵：系统异常，RDP爆破，SSH爆破，主机漏洞</li><li>病毒木马：远控，后门，勒索软件</li><li>信息泄漏：SQL注入，数据库登录（弱口令，帐号密码泄漏）</li><li>网络流量：异常的频繁发包，批量请求，DDOS攻击</li></ul><h1 id="常规排查流程"><a href="#常规排查流程" class="headerlink" title="常规排查流程"></a>常规排查流程</h1><ol><li>确定被入侵的主机，立即对主机进行离线隔离处理</li><li>攻击类型的定位</li><li>确定攻击的时间范围</li><li>进行分析溯源：<ul><li>对文件进行分析</li><li>对进程进行分析</li><li>对系统进行分析</li><li>对日志进行分析</li><li>对关联文件进行分析</li><li>整合分析结果，推断攻击过程</li></ul></li><li>清理恶意文件，修复漏洞</li><li>事件总结</li></ol><h1 id="分析手段"><a href="#分析手段" class="headerlink" title="分析手段"></a>分析手段</h1><h2 id="linux分析排查"><a href="#linux分析排查" class="headerlink" title="linux分析排查"></a>linux分析排查</h2><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><h4 id="敏感目录的文件分析"><a href="#敏感目录的文件分析" class="headerlink" title="敏感目录的文件分析"></a>敏感目录的文件分析</h4><ol><li>查看tmp目录下的文件 <code>ls -alt /tmp/</code></li><li>查看开机启动项 <code>ls -alt /etc/init.d/</code></li><li>以文件时间排序 <code>ls -alt | head -n 10</code></li><li>针对可疑文件使用<code>stat</code>进行创建修改时间，访问时间的详细查看(如果修改时间距离事件日期接近，有线性关联，说明可能被篡改或者其他)</li><li>查看24小时内被修改的php文件 <code>find ./ -mtime 0 -name &quot;*.php&quot;</code></li><li>查看72小时内被修改的文件 <code>find / -ctime -2</code></li><li>根据确定时间反推变更文件 <code>ls -al /tmp | grep &quot;Feb 27&quot;</code></li><li>查看特殊权限文件 <code>find / *.php -perm 4777</code></li><li>注意隐藏的文件</li></ol><h4 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h4><ol><li>使用<code>netstat</code>网络连接命令，分析可疑端口，可疑IP，可疑PID以及程序进程 <code>netstat -antlp | less</code></li><li><code>ps</code>查看进程 <code>ps aux | grep pid | grep -v grep</code></li><li><code>lsof</code> 查看指定端口对应的程序 <code>lsof -i:8888</code></li><li>使用<code>ls</code>以及<code>stat</code>查看系统命令是否被替换<ul><li>ls -alt /usr/bin | head -10</li><li>ls -al /bin /usr/bin /usr/sbin /sbin | grep “Feb 27”</li></ul></li><li>隐藏进程的查看<ul><li>ps -ef | awk ‘{print}’ | sort -n | uniq &gt; 1</li><li>ls /proc | sort -n | uniq &gt; 2</li><li>diff 1 2</li></ul></li></ol><h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><p>一些需要重点排查的</p><pre><code>history(cat /root/.bash_history)/etc/passwdcrontab /etc/cron*rc.local /etc/init.d chkconfiglast$PATHstrings</code></pre><ol><li><p>查看分析history(不排除被清理)</p><ul><li>wget 下载的内容，可能是木马，挖矿病毒</li><li>ssh/scp记录，分析攻击者是否有入侵其他机器</li><li>tar/zip等压缩命令，可能是攻击者打包的敏感数据</li><li>vim/vi/sed等编辑命令，可能会修改系统的某些配置</li></ul></li><li><p>查看分析用户方面</p><ul><li>useradd/userdel 命令的时间变化</li><li>cat /etc/passwd 查看可疑用户，可以登录用户</li><li>查看UID为0的账号：awk -F ‘{if($3==0)print $1}’ /etc/passwd</li><li>查看可以登录的帐号：cat /etc/passwd | grep -E “/bin/bash$”</li><li>UID为0的帐号不一定可疑，freebsd默认存在toor帐号也为0</li></ul></li><li><p>查看分析任务计划</p><ul><li>通过<code>crontabl -l</code>查看当前的任务计划，许多后门都会有写入任务计划的操作</li><li>查看etc目录任务计划相关的文件 <code>ls /etc/cron*</code></li></ul></li><li><p>查看linux 开机启动程序</p><ul><li>查看<code>rc.local</code>文件（/etc/init.d/rc.local /etc/rc.local）</li><li>ls -alt /etc/init.d/</li><li>chkconfig</li></ul></li><li><p>查看系统用户登录信息</p><ul><li>使用<code>lastlog</code>命令，显示系统中所有用户的最近一次登录信息</li><li>使用 <code>lastb</code>显示用户错误的登录列表</li><li>使用 <code>last</code>显示用户最近的登录信息（/var/log/wtmp var/log/btmp）</li></ul></li><li><p>使用<code>strings</code>指定信息检索</p><ul><li><code>strings</code>命令可以在对象或者二进制文件中查找可打印的字符串</li><li>分析 <code>sshd</code>文件，是否包含IP信息 <code>strings ’/usr/bin/.sshd | grep &#39;[1-9]{1,3}.[1-9]{1,3}.&#39;</code></li><li>根据关键字匹配命令是否包含信息（IP地址，时间信息，远控信息，木马特征等等）</li><li>查看ssh相关目录是否有可疑的公钥存在</li></ul></li></ol><h3 id="后门排查"><a href="#后门排查" class="headerlink" title="后门排查"></a>后门排查</h3><h4 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h4><p>除了上面手工对文件进行分析以外，推荐使用工具：</p><ul><li>chkrootkit</li><li>rkhunter</li></ul><h4 id="rpm包"><a href="#rpm包" class="headerlink" title="rpm包"></a>rpm包</h4><p>我们也可以使用<code>rpm</code>自带的<code>-Va</code>来校验所有的RPM软件包，有哪些被篡改了,防止rpm也被替换,上传一个安全干净稳定版本rpm二进制到服务器上进行检查</p><h4 id="webshell查找"><a href="#webshell查找" class="headerlink" title="webshell查找"></a>webshell查找</h4><p>webshell一般可以通过文件、流量、日志三种方式进行分析，基于文件的命名特征和内容特征，相对操作性较高，在入侵后应急过程中频率也比较高。</p><p>可根据webshell特征进行命令查找，简单的可使用(当然会存在漏报和误报)</p><pre><code>find /var/www/ -name &quot;*.php&quot; |xargs egrep &apos;assert|phpspy|c99sh|milw0rm|eval|\(gunerpress|\(base64_decoolcode|spider_bc|shell_exec|passthru|\(\$\_\POST\[|eval \(str_rot13|\.chr\(|\$\{\&quot;\_P|eval\(\$\_R|file_put_contents\(\.\*\$\_|base64_decode&apos;</code></pre><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><pre><code>日志文件/var/log/message       包括整体系统信息/var/log/auth.log        包含系统授权信息，包括用户登录和使用的权限机制等/var/log/userlog         记录所有等级用户信息的日志。/var/log/cron           记录crontab命令是否被正确的执行/var/log/xferlog(vsftpd.log)记录Linux FTP日志/var/log/lastlog         记录登录的用户，可以使用命令lastlog查看/var/log/secure         记录大多数应用输入的账号与密码，登录成功与否/var/log/wtmp　　      记录登录系统成功的账户信息，等同于命令last/var/log/faillog　　      记录登录系统不成功的账号信息，一般会被黑客删除</code></pre><p>登录日志可以关注Accepted、Failed password 、invalid特殊关键字</p><p>一下是一些语句的例子</p><pre><code>定位有多少IP在爆破主机的root帐号grep &quot;Failed password for root&quot; /var/log/auth.log | awk &apos;{print $11}&apos; | sort | uniq -c | sort -nr | more登录成功的IP有哪些grep &quot;Accepted &quot; /var/log/auth.log | awk &apos;{print $11}&apos; | sort | uniq -c | sort -nr | more  tail -400f demo.log #监控最后400行日志文件的变化 等价与 tail -n 400 -f （-f参数是实时）  less demo.log #查看日志文件，支持上下滚屏，查找功能  uniq -c demo.log  #标记该行重复的数量，不重复值为1 grep -c &apos;ERROR&apos; demo.log   #输出文件demo.log中查找所有包行ERROR的行的数量</code></pre><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="文件分析-1"><a href="#文件分析-1" class="headerlink" title="文件分析"></a>文件分析</h3><ol><li>开机启动是否有异常文件</li><li>各个盘下的temp相关目录查看有无异常文件</li><li>浏览器浏览痕迹，浏览器下载文件，浏览器cookie信息</li><li>查看文件时间，创建时间、修改时间、访问时间。对应linux的ctime mtime atime，通过对文件右键属性即可看到详细的时间（也可以通过dir /tc 1.aspx 来查看创建时间），黑客通过菜刀类工具改变的是修改时间。所以如果修改时间在创建时间之前明显是可疑文件。</li><li>查看用户recent相关文件，通过分析<code>最近打开</code>分析可疑文件<ul><li>C:\Documents and Settings\Administrator\Recent</li><li>C:\Documents and Settings\Default User\Recent</li><li>开始,运行 %UserProfile%\Recent</li></ul></li><li>根据文件夹内文件列表时间进行排序，查找可疑文件。当然也可以搜索指定日期范围的文件及文件件</li></ol><h3 id="进程分析-1"><a href="#进程分析-1" class="headerlink" title="进程分析"></a>进程分析</h3><ul><li>netstat -ano 查看目前的网络连接</li><li>根据netstat定位出的pid，在通过<code>tasklist</code>命令进行进程定位</li></ul><h3 id="系统信息-1"><a href="#系统信息-1" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li>使用set命令查看变量的设置</li><li>windows计划任务</li><li>windows的帐号信息，注意隐藏帐号，来宾帐号</li><li>配套的注册表信息检索查看，SAM文件以及远控软件类</li><li>查看<code>systeminfo</code>信息，系统版本以及补丁信息</li></ul><h3 id="后门排查-1"><a href="#后门排查-1" class="headerlink" title="后门排查"></a>后门排查</h3><p>PC Hunter是一个Windows系统信息查看软件</p><p>hm 后门检索工具</p><h1 id="常用应急命令"><a href="#常用应急命令" class="headerlink" title="常用应急命令"></a>常用应急命令</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><table><thead><tr><th>项目</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>查看网络连接和进程信息</td><td>ps aux | awk ‘{print $3,$11,$12,$13}’ |sort|uniq|grep -v CPU | sort -k1,1nr | head -n 5</td><td>查看最占用CPU的进程</td></tr><tr><td></td><td>ps aux | awk ‘{print $4,$11,$12,$13}’ |sort|uniq|grep -v CPU | sort -k1,1nr | head -n 5</td><td>查看最占用内存的进程</td></tr><tr><td></td><td>lsof -i -PnR</td><td>查看可以网络连接</td></tr><tr><td>查看异常用户和进程</td><td>pstree|grep -E – “-httpd-|-nginx-|-tomcat-|-apache-|-resin-|-php-cgi|-java-“|grep “sh —“</td><td>查看是否存在一个web服务建立的伪终端进程</td></tr><tr><td></td><td>cat /etc/passwd|grep -v nologin</td><td>检查是否存在多个uid为0的账户以及其他异常账户</td></tr><tr><td></td><td>netstat -anptnlu|grep xxx</td><td>查看某异常进程是否存在对外(TCP|UDP)连接</td></tr><tr><td></td><td>cd proc/7057;cat *|strings -n 5 | more</td><td>找到进程号所在的地方，查看字符串</td></tr><tr><td></td><td>ls /etc/init.d/;ls /etc/cron.hourly/;crontab -e</td><td>查看启动项，计划任务</td></tr><tr><td>排查恶意程序文件</td><td>stat /lib/libtest.so</td><td>查看文件各种时间详细信息</td></tr><tr><td></td><td>find ./ -mtime n -print</td><td>n天前那天改过的文件</td></tr><tr><td></td><td>find ./ -mtime +n -print</td><td>n天前改过的文件</td></tr><tr><td></td><td>find ./ -mtime -n -print</td><td>n天前至今改过的文件</td></tr><tr><td>ssh登录排查</td><td>grep ‘Accepted’ /var/log/secure |awk ‘{print $11}’ |sort|uniq -c | sourt -nr | 登录成功的信息</td><td></td></tr><tr><td></td><td>last</td><td>登录成功的信息</td></tr><tr><td></td><td>grep “Failed” /var/log/secure | awk ‘{print $11}’|sort|uniq -c | sort -nr</td><td>登录失败的信息</td></tr><tr><td></td><td>lastb</td><td>登录失败的信息</td></tr><tr><td>ssh后门排查</td><td>ssh -V</td><td>比对ssh的版本</td></tr><tr><td></td><td>stat /usr/sbin/sshd</td><td>查看ssh配置文件和/usr/sbin/sshd时间</td></tr><tr><td></td><td>strings /usr/sbin/sshd</td><td>看是否存在字符信息</td></tr><tr><td></td><td>strace sshd</td><td>可以通过strace进程跟踪到ssh登录密码文件</td></tr><tr><td>日志排查</td><td>egrep ‘(select|script|acunetix|sqlmap)’ /var/log/httpd/access_log</td><td>根据特征搜索</td></tr><tr><td></td><td>grep ‘POST’ /var/log/httpd/access_log | awk ‘{print $1}’|sort|uniq -c |sort -nr</td><td>(访问频率)重点关注POST请求(登录)</td></tr><tr><td></td><td>awk ‘{if($10&gt;5000000){print $0}}’ /var/log/httpd/access_log</td><td>content-length过大的请求</td></tr><tr><td></td><td>find /var/www/html -type f -name “<em>.php”|xargs grep “^&lt;?php.\</em>?&gt;$”</td><td>简单快速找php小马</td></tr><tr><td></td><td>find /var/www/html -type -f -name “*.jsp”|xargs grep “invoke(“</td><td>查找jsp小马</td></tr></tbody></table><h2 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h2><table><thead><tr><th>项目</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>查看异常进程</td><td>tasklist</td><td>查看系统进程信息</td></tr><tr><td></td><td>tasklist /svc</td><td>查看进程对应的服务信息</td></tr><tr><td></td><td>Procxp</td><td>查看系统进程和进程详细信息</td></tr><tr><td></td><td>PCHunter</td><td>查看系统进程和系统内核信息</td></tr><tr><td></td><td>Pocess Monitor</td><td>抓取当前系统上各个进程的API调用，注册表修改，文件操作，网络通信等操作详情</td></tr><tr><td>查看网络连接与流量</td><td>netstat -ano</td><td>查看当前系统上的网络连接信息</td></tr><tr><td></td><td>wireshark</td><td>抓包工具</td></tr><tr><td>查看异常用户</td><td>quser</td><td>查看用户会话信息</td></tr><tr><td></td><td>net user</td><td>查询系统用户</td></tr><tr><td>日志排查</td><td>eventvwr</td><td>系统事件管理</td></tr><tr><td></td><td>lorg -u -g %access_log_path%</td><td>分析HTTPD日志文件</td></tr><tr><td>排查恶意程序文件</td><td>sc query</td><td>查询系统服务信息</td></tr><tr><td></td><td>regedit</td><td>查询注册表信息</td></tr><tr><td></td><td>portmon</td><td>端口通信数据监视</td></tr><tr><td></td><td>procdump</td><td>保存进程内存信息和上下文</td></tr></tbody></table><blockquote><p>以上文章为我看blog的时候为了加强记忆整理的(抄的)大佬的文章</p></blockquote><blockquote><p><a href="https://xz.aliyun.com/t/1140/" target="_blank" rel="noopener">https://xz.aliyun.com/t/1140/</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/he1m4n6a/p/10064635.html" target="_blank" rel="noopener">https://www.cnblogs.com/he1m4n6a/p/10064635.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 应急响应 </tag>
            
            <tag> 手工排查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人blog</title>
      <link href="/other/hexo/2019/07/28/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog.html"/>
      <url>/other/hexo/2019/07/28/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里讲述了一个小白折腾hexo的坎坷经历</p></blockquote><a id="more"></a><h1 id="hexo环境搭建到放弃"><a href="#hexo环境搭建到放弃" class="headerlink" title="hexo环境搭建到放弃"></a>hexo环境搭建到放弃</h1><p>因为工作和生活的需要，我使用的是<code>arch linux</code>系列中的<code>manjaro</code>操作系统，本以为搭建hexo环境会很简单，但是现实给了我一耳光(后来的事实证明是因为我菜，manjaro安装hexo的确简单，但是也有坑)，我曾经一度放弃hexo就是因为我连环境搭建的关卡都过不去</p><h2 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h2><p>网上基本都会告诉你，安装hexo需要nodejs环境，但是nodejs环境怎么搭建？</p><p>windows:</p><pre><code>直接下载安装包安装，同样如果可以建议使用nvm安装</code></pre><p>linux:</p><pre><code>建议使用nvm安装nvm:nodejs环境管理工具，相当于python的pyenv</code></pre><p>在照着网上的各种一家抄的博客折腾一遍之后，我才反映过来，我用的是<code>manjaro</code>啊，我为啥不<code>yay</code>一手呢？</p><p>事实证明，<code>manjaro</code>的<code>yay</code>很强大，安装nvm是吧？</p><pre><code>yay -s nvm</code></pre><p>换一种，安装hexo是吧？</p><pre><code>yay -s hexo</code></pre><p>生活就是如此轻松简单。</p><p>当然，这里推荐的是使用nvm，这对于后面的多pc同步有好处</p><p>使用nvm安装指定版本的node</p><pre><code>nvm install 11 # 具体更多的nvm操作请参考官方文档</code></pre><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>node环境搭建完毕后，剩下的就简单多了</p><p>使用<code>npm</code>安装<code>hexo</code>在所有的平台都是一样的</p><pre><code>npm install -g hexo-cli # 网上说可能会因为权限问题安装失败npm install hexo-server --save# 网上的指示还有一些别的插件，但是我没单独装过所以不知道有啥用# 至于我为什么没有单独装，因为我是用的下面的命令npm install hexo# 反正这样安装正常的功能都能用</code></pre><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><pre><code># 首先你需要cd进入到blog文件夹hexo init # hexo会在目标文件夹建立网站所需要的所有文件hexo install # 安装依赖包</code></pre><h3 id="本地启动服务"><a href="#本地启动服务" class="headerlink" title="本地启动服务"></a>本地启动服务</h3><pre><code># 我们会对自己的各种配置文件，模板文件进行修改，这时候hexo启动一个本地服务就可以很方便进行调试hexo g # 等同于hexo generate，生成静态文件hexo s # 等同于hexo server，在本地服务器运行# 打开浏览器访问 http://localhost:4000/ 就看以看见自己的blog了</code></pre><h3 id="新建文章与页面"><a href="#新建文章与页面" class="headerlink" title="新建文章与页面"></a>新建文章与页面</h3><pre><code>hexo new &quot;title&quot; # 在 ./source/_posts/title.md 生成新的文章文件hexo new page &quot;title&quot; # 生成新的页面，比如生成一个about页面</code></pre><p>生成的文章或者页面的模板放在 <code>./scaffolds/</code> 文件夹当中，文章对应的是<code>post.md</code>,页面对应的是<code>page.md</code>,草稿对应的是<code>draft.md</code></p><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>打开新建的文章<code>./source/_posts/title.md</code></p><pre><code>---title: 标题date: 文章自动生成的时间categories: 文章的分类目录，多个可以使用 `无序列表`tages: 文章的标签---# 这里开始输入你的正文，会在首页中显示出来&lt;!--more--&gt;# moren 这里也是正文，这里的正文是在首页不会显示的，只有点击“阅读全文”才能看见</code></pre><h3 id="hexo的命令总结"><a href="#hexo的命令总结" class="headerlink" title="hexo的命令总结"></a>hexo的命令总结</h3><pre><code>hexo init [folder] # 初始化文件夹为hexo目录hexo new [layout] &lt;title&gt; # 新建一篇文章. 如果没有设置 layout 的话, 默认使用 _config.yml 中的 default_layout 参数代替. 如果标题包含空格的话, 请使用引号括起来hexo version # 查看版本hexo clean # 清除缓存文件(db.json)和已经生成的静态文件(public)hexo g # 生成静态文件(一般每次发布都会先清理一遍然后重新发布)hexo s # 启动本地服务器，本地预览hexo d # 部署到指定服务器</code></pre><h1 id="Hexo的美化-插件功能"><a href="#Hexo的美化-插件功能" class="headerlink" title="Hexo的美化+插件功能"></a>Hexo的美化+插件功能</h1><p>此处暂且略过，慢慢添加</p><h1 id="Hexo多PC同步"><a href="#Hexo多PC同步" class="headerlink" title="Hexo多PC同步"></a>Hexo多PC同步</h1><p>无非是把hexo的源文件上传到github同步而已，只不过中间有些需要注意的地方</p><h2 id="gitignore忽略"><a href="#gitignore忽略" class="headerlink" title=".gitignore忽略"></a>.gitignore忽略</h2><p>编辑<code>.gitignore</code>文件，声明不被<code>git</code>记录的文件，建议忽略的内容如下</p><pre><code>.DS_Store      Thumbs.db      db.json      *.log      node_modules/      public/      .deploy*/</code></pre><p><code>public</code>内的文件可以根据<code>source</code>文件夹内容自动生成，, 不需要备份. 其他日志、压缩、数据库等文件也都是调试等使用, 也不需要备份.</p><h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p>初始化仓库</p><pre><code>git initgit remote add origin &lt;server&gt;</code></pre><p>同步</p><pre><code>git add .git commit -m &quot;&quot;git push -u origin master</code></pre><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>这里就是有可能坑的地方，如果你的node版本不同的化，可能有的插件不能使用，所以建议使用nvm下载相同版本的node使用hexo</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nodejs </tag>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
